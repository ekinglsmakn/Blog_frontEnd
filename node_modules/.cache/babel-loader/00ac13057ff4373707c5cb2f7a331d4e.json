{"ast":null,"code":"var _jsxFileName = \"C:\\\\ms_blog\\\\mainProject\\\\F4\\\\src\\\\shared\\\\components\\\\EmojiTextArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\nimport { TextField, IconButton, Collapse, FormHelperText, Box, Grid, withStyles } from \"@material-ui/core\";\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport countWithEmojis from \"../functions/countWithEmojis\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  \"@global\": {\n    \".emoji-mart-category-label\": theme.typography.body1,\n    \".emoji-mart-bar\": {\n      display: \"none !important\"\n    },\n    \".emoji-mart-search input\": { ...theme.typography.body1,\n      ...theme.border\n    },\n    \".emoji-mart-search\": {\n      marginTop: `${theme.spacing(1)}px !important`,\n      paddingRight: `${theme.spacing(1)}px !important`,\n      paddingLeft: `${theme.spacing(1)}px !important`,\n      paddingBottom: `${theme.spacing(1)}px !important`\n    },\n    \".emoji-mart-search-icon\": {\n      top: \"5px !important\",\n      right: \"14px !important\",\n      fontSize: 20\n    },\n    \".emoji-mart-scroll\": {\n      height: 240\n    },\n    \".emoji-mart\": { ...theme.border\n    }\n  },\n  floatButtonWrapper: {\n    position: \"absolute\",\n    bottom: 12,\n    right: 12\n  },\n  floatButtonSVG: {\n    color: theme.palette.primary.light\n  },\n  relative: {\n    position: \"relative\"\n  }\n});\n/**\r\n * Emojis whose unified is greater than 5 sometimes\r\n * are not displayed correcty in the browser.\r\n * We won't display them.\r\n */\n\n\nconst emojisToShowFilter = emoji => {\n  if (emoji.unified.length > 5) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction EmojiTextarea(props) {\n  _s();\n\n  const {\n    theme,\n    classes,\n    rightContent,\n    placeholder,\n    maxCharacters,\n    emojiSet,\n    inputClassName,\n    onChange\n  } = props;\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [characters, setCharacters] = useState(0);\n  const onSelectEmoji = useCallback(emoji => {\n    let _characters;\n\n    let _value = value + emoji.native;\n\n    if (maxCharacters) {\n      _characters = countWithEmojis(_value);\n\n      if (_characters > maxCharacters) {\n        return;\n      }\n    }\n\n    if (onChange) {\n      onChange(_value, _characters);\n    }\n\n    setValue(_value);\n    setCharacters(_characters);\n  }, [value, setValue, setCharacters, maxCharacters, onChange]);\n  const handleTextFieldChange = useCallback(event => {\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target;\n    let characters;\n\n    if (maxCharacters) {\n      characters = countWithEmojis(value);\n\n      if (characters > maxCharacters) {\n        return;\n      }\n    }\n\n    if (onChange) {\n      onChange(value, characters);\n    }\n\n    setValue(value);\n    setCharacters(characters);\n  }, [maxCharacters, onChange, setValue, setCharacters]);\n  const toggleOpen = useCallback(() => {\n    setOpen(!open);\n  }, [open, setOpen]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      spacing: 0,\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: rightContent ? 8 : 12,\n        sm: rightContent ? 9 : 12,\n        lg: rightContent ? 10 : 12,\n        className: classes.relative,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          variant: \"outlined\",\n          rows: 6,\n          onInput: handleTextFieldChange,\n          value: value,\n          placeholder: placeholder,\n          InputProps: {\n            classes: {\n              notchedOutline: inputClassName ? inputClassName : null\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.floatButtonWrapper,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleOpen,\n            children: open ? /*#__PURE__*/_jsxDEV(CloseIcon, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(EmojiEmotionsIcon, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), rightContent && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        sm: 3,\n        lg: 2,\n        children: rightContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), maxCharacters && /*#__PURE__*/_jsxDEV(FormHelperText, {\n      error: characters >= maxCharacters,\n      children: `${characters}/${maxCharacters} characters`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      in: open,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        mt: 1,\n        children: /*#__PURE__*/_jsxDEV(Picker, {\n          set: emojiSet,\n          color: theme.palette.primary.main,\n          style: {\n            width: \"100%\"\n          },\n          onSelect: onSelectEmoji,\n          emojisToShowFilter: emojisToShowFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EmojiTextarea, \"w/mHtI42vEZLVKP1ddxCNy36Q7o=\");\n\n_c = EmojiTextarea;\nEmojiTextarea.propTypes = {\n  theme: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  emojiSet: PropTypes.string.isRequired,\n  rightContent: PropTypes.element,\n  placeholder: PropTypes.string,\n  maxCharacters: PropTypes.number,\n  onChange: PropTypes.func,\n  inputClassName: PropTypes.string\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(EmojiTextarea);\n\nvar _c;\n\n$RefreshReg$(_c, \"EmojiTextarea\");","map":{"version":3,"sources":["C:/ms_blog/mainProject/F4/src/shared/components/EmojiTextArea.js"],"names":["React","Fragment","useState","useCallback","PropTypes","Picker","TextField","IconButton","Collapse","FormHelperText","Box","Grid","withStyles","EmojiEmotionsIcon","CloseIcon","countWithEmojis","styles","theme","typography","body1","display","border","marginTop","spacing","paddingRight","paddingLeft","paddingBottom","top","right","fontSize","height","floatButtonWrapper","position","bottom","floatButtonSVG","color","palette","primary","light","relative","emojisToShowFilter","emoji","unified","length","EmojiTextarea","props","classes","rightContent","placeholder","maxCharacters","emojiSet","inputClassName","onChange","open","setOpen","value","setValue","characters","setCharacters","onSelectEmoji","_characters","_value","native","handleTextFieldChange","event","target","toggleOpen","notchedOutline","main","width","propTypes","object","isRequired","string","element","number","func","withTheme"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport {\r\n  TextField,\r\n  IconButton,\r\n  Collapse,\r\n  FormHelperText,\r\n  Box,\r\n  Grid,\r\n  withStyles\r\n} from \"@material-ui/core\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport countWithEmojis from \"../functions/countWithEmojis\";\r\n\r\nconst styles = theme => ({\r\n  \"@global\": {\r\n    \".emoji-mart-category-label\": theme.typography.body1,\r\n    \".emoji-mart-bar\": { display: \"none !important\" },\r\n    \".emoji-mart-search input\": {\r\n      ...theme.typography.body1,\r\n      ...theme.border\r\n    },\r\n    \".emoji-mart-search\": {\r\n      marginTop: `${theme.spacing(1)}px !important`,\r\n      paddingRight: `${theme.spacing(1)}px !important`,\r\n      paddingLeft: `${theme.spacing(1)}px !important`,\r\n      paddingBottom: `${theme.spacing(1)}px !important`\r\n    },\r\n    \".emoji-mart-search-icon\": {\r\n      top: \"5px !important\",\r\n      right: \"14px !important\",\r\n      fontSize: 20\r\n    },\r\n    \".emoji-mart-scroll\": {\r\n      height: 240\r\n    },\r\n    \".emoji-mart\": {\r\n      ...theme.border\r\n    }\r\n  },\r\n  floatButtonWrapper: {\r\n    position: \"absolute\",\r\n    bottom: 12,\r\n    right: 12\r\n  },\r\n  floatButtonSVG: {\r\n    color: theme.palette.primary.light\r\n  },\r\n  relative: {\r\n    position: \"relative\"\r\n  }\r\n});\r\n\r\n/**\r\n * Emojis whose unified is greater than 5 sometimes\r\n * are not displayed correcty in the browser.\r\n * We won't display them.\r\n */\r\nconst emojisToShowFilter = emoji => {\r\n  if (emoji.unified.length > 5) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nfunction EmojiTextarea(props) {\r\n  const {\r\n    theme,\r\n    classes,\r\n    rightContent,\r\n    placeholder,\r\n    maxCharacters,\r\n    emojiSet,\r\n    inputClassName,\r\n    onChange\r\n  } = props;\r\n  const [open, setOpen] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n  const [characters, setCharacters] = useState(0);\r\n\r\n  const onSelectEmoji = useCallback(\r\n    emoji => {\r\n      let _characters;\r\n      let _value = value + emoji.native;\r\n      if (maxCharacters) {\r\n        _characters = countWithEmojis(_value);\r\n        if (_characters > maxCharacters) {\r\n          return;\r\n        }\r\n      }\r\n      if (onChange) {\r\n        onChange(_value, _characters);\r\n      }\r\n      setValue(_value);\r\n      setCharacters(_characters);\r\n    },\r\n    [value, setValue, setCharacters, maxCharacters, onChange]\r\n  );\r\n\r\n  const handleTextFieldChange = useCallback(\r\n    event => {\r\n      const { target } = event;\r\n      const { value } = target;\r\n      let characters;\r\n      if (maxCharacters) {\r\n        characters = countWithEmojis(value);\r\n        if (characters > maxCharacters) {\r\n          return;\r\n        }\r\n      }\r\n      if (onChange) {\r\n        onChange(value, characters);\r\n      }\r\n      setValue(value);\r\n      setCharacters(characters);\r\n    },\r\n    [maxCharacters, onChange, setValue, setCharacters]\r\n  );\r\n\r\n  const toggleOpen = useCallback(() => {\r\n    setOpen(!open);\r\n  }, [open, setOpen]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid spacing={0} container>\r\n        <Grid\r\n          item\r\n          xs={rightContent ? 8 : 12}\r\n          sm={rightContent ? 9 : 12}\r\n          lg={rightContent ? 10 : 12}\r\n          className={classes.relative}\r\n        >\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            variant=\"outlined\"\r\n            rows={6}\r\n            onInput={handleTextFieldChange}\r\n            value={value}\r\n            placeholder={placeholder}\r\n            InputProps={{\r\n              classes: {\r\n                notchedOutline: inputClassName ? inputClassName : null\r\n              }\r\n            }}\r\n          />\r\n          <div className={classes.floatButtonWrapper}>\r\n            <IconButton onClick={toggleOpen}>\r\n              {open ? (\r\n                <CloseIcon color=\"primary\" />\r\n              ) : (\r\n                <EmojiEmotionsIcon color=\"primary\" />\r\n              )}\r\n            </IconButton>\r\n          </div>\r\n        </Grid>\r\n        {rightContent && (\r\n          <Grid item xs={4} sm={3} lg={2}>\r\n            {rightContent}\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n      {maxCharacters && (\r\n        <FormHelperText error={characters >= maxCharacters}>\r\n          {`${characters}/${maxCharacters} characters`}\r\n        </FormHelperText>\r\n      )}\r\n      <Collapse in={open}>\r\n        <Box mt={1}>\r\n          <Picker\r\n            set={emojiSet}\r\n            color={theme.palette.primary.main}\r\n            style={{ width: \"100%\" }}\r\n            onSelect={onSelectEmoji}\r\n            emojisToShowFilter={emojisToShowFilter}\r\n          />\r\n        </Box>\r\n      </Collapse>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nEmojiTextarea.propTypes = {\r\n  theme: PropTypes.object.isRequired,\r\n  classes: PropTypes.object.isRequired,\r\n  emojiSet: PropTypes.string.isRequired,\r\n  rightContent: PropTypes.element,\r\n  placeholder: PropTypes.string,\r\n  maxCharacters: PropTypes.number,\r\n  onChange: PropTypes.func,\r\n  inputClassName: PropTypes.string\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(EmojiTextarea);\r\n"]},"metadata":{},"sourceType":"module"}