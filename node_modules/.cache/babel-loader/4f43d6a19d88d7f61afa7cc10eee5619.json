{"ast":null,"code":"var _jsxFileName = \"C:\\\\ms_blog\\\\mainProject\\\\F4\\\\src\\\\logged_out\\\\components\\\\register_login\\\\RegisterDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FormHelperText, TextField, Button, Checkbox, Typography, FormControlLabel, withStyles } from \"@material-ui/core\";\nimport FormDialog from \"../../../shared/components/FormDialog\";\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\nimport VisibilityPasswordTextField from \"../../../shared/components/VisibilityPasswordTextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  link: {\n    transition: theme.transitions.create([\"background-color\"], {\n      duration: theme.transitions.duration.complex,\n      easing: theme.transitions.easing.easeInOut\n    }),\n    cursor: \"pointer\",\n    color: theme.palette.primary.main,\n    \"&:enabled:hover\": {\n      color: theme.palette.primary.dark\n    },\n    \"&:enabled:focus\": {\n      color: theme.palette.primary.dark\n    }\n  }\n});\n\nfunction RegisterDialog(props) {\n  _s();\n\n  const {\n    setStatus,\n    theme,\n    onClose,\n    openTermsDialog,\n    status,\n    classes\n  } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasTermsOfServiceError, setHasTermsOfServiceError] = useState(false);\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  const registerTermsCheckbox = useRef();\n  const registerPassword = useRef();\n  const registerPasswordRepeat = useRef();\n  const register = useCallback(() => {\n    if (!registerTermsCheckbox.current.checked) {\n      setHasTermsOfServiceError(true);\n      return;\n    }\n\n    if (registerPassword.current.value !== registerPasswordRepeat.current.value) {\n      setStatus(\"passwordsDontMatch\");\n      return;\n    }\n\n    setStatus(null);\n    setIsLoading(true);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 1500);\n  }, [setIsLoading, setStatus, setHasTermsOfServiceError, registerPassword, registerPasswordRepeat, registerTermsCheckbox]);\n  return /*#__PURE__*/_jsxDEV(FormDialog, {\n    loading: isLoading,\n    onClose: onClose,\n    open: true,\n    headline: \"Register\",\n    onFormSubmit: e => {\n      e.preventDefault();\n      register();\n    },\n    hideBackdrop: true,\n    hasCloseIcon: true,\n    content: /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"outlined\",\n        margin: \"normal\",\n        required: true,\n        fullWidth: true,\n        error: status === \"invalidEmail\",\n        label: \"Email Address\",\n        autoFocus: true,\n        autoComplete: \"off\",\n        type: \"email\",\n        onChange: () => {\n          if (status === \"invalidEmail\") {\n            setStatus(null);\n          }\n        },\n        FormHelperTextProps: {\n          error: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(VisibilityPasswordTextField, {\n        variant: \"outlined\",\n        margin: \"normal\",\n        required: true,\n        fullWidth: true,\n        error: status === \"passwordTooShort\" || status === \"passwordsDontMatch\",\n        label: \"Password\",\n        inputRef: registerPassword,\n        autoComplete: \"off\",\n        onChange: () => {\n          if (status === \"passwordTooShort\" || status === \"passwordsDontMatch\") {\n            setStatus(null);\n          }\n        },\n        helperText: (() => {\n          if (status === \"passwordTooShort\") {\n            return \"Create a password at least 6 characters long.\";\n          }\n\n          if (status === \"passwordsDontMatch\") {\n            return \"Your passwords dont match.\";\n          }\n\n          return null;\n        })(),\n        FormHelperTextProps: {\n          error: true\n        },\n        isVisible: isPasswordVisible,\n        onVisibilityChange: setIsPasswordVisible\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(VisibilityPasswordTextField, {\n        variant: \"outlined\",\n        margin: \"normal\",\n        required: true,\n        fullWidth: true,\n        error: status === \"passwordTooShort\" || status === \"passwordsDontMatch\",\n        label: \"Repeat Password\",\n        inputRef: registerPasswordRepeat,\n        autoComplete: \"off\",\n        onChange: () => {\n          if (status === \"passwordTooShort\" || status === \"passwordsDontMatch\") {\n            setStatus(null);\n          }\n        },\n        helperText: (() => {\n          if (status === \"passwordTooShort\") {\n            return \"Create a password at least 6 characters long.\";\n          }\n\n          if (status === \"passwordsDontMatch\") {\n            return \"Your passwords dont match.\";\n          }\n        })(),\n        FormHelperTextProps: {\n          error: true\n        },\n        isVisible: isPasswordVisible,\n        onVisibilityChange: setIsPasswordVisible\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        style: {\n          marginRight: 0\n        },\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          color: \"primary\",\n          inputRef: registerTermsCheckbox,\n          onChange: () => {\n            setHasTermsOfServiceError(false);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this),\n        label: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: [\"I agree to the\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.link,\n            onClick: isLoading ? null : openTermsDialog,\n            tabIndex: 0,\n            role: \"button\",\n            onKeyDown: event => {\n              // For screenreaders listen to space and enter events\n              if (!isLoading && event.keyCode === 13 || event.keyCode === 32) {\n                openTermsDialog();\n              }\n            },\n            children: [\" \", \"terms of service\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), hasTermsOfServiceError && /*#__PURE__*/_jsxDEV(FormHelperText, {\n        error: true,\n        style: {\n          display: \"block\",\n          marginTop: theme.spacing(-1)\n        },\n        children: \"In order to create an account, you have to accept our terms of service.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this), status === \"accountCreated\" ? /*#__PURE__*/_jsxDEV(HighlightedInformation, {\n        children: \"We have created your account. Please click on the link in the email we have sent to you before logging in.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(HighlightedInformation, {\n        children: \"Registration is disabled until we go live.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this),\n    actions: /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      size: \"large\",\n      color: \"secondary\",\n      disabled: isLoading,\n      children: [\"Register\", isLoading && /*#__PURE__*/_jsxDEV(ButtonCircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegisterDialog, \"aW1FnSfcrtpMU97/Ypgngj+CSvE=\");\n\n_c = RegisterDialog;\nRegisterDialog.propTypes = {\n  theme: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  openTermsDialog: PropTypes.func.isRequired,\n  status: PropTypes.string,\n  setStatus: PropTypes.func.isRequired,\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(RegisterDialog);\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterDialog\");","map":{"version":3,"sources":["C:/ms_blog/mainProject/F4/src/logged_out/components/register_login/RegisterDialog.js"],"names":["React","useState","useCallback","useRef","Fragment","PropTypes","FormHelperText","TextField","Button","Checkbox","Typography","FormControlLabel","withStyles","FormDialog","HighlightedInformation","ButtonCircularProgress","VisibilityPasswordTextField","styles","theme","link","transition","transitions","create","duration","complex","easing","easeInOut","cursor","color","palette","primary","main","dark","RegisterDialog","props","setStatus","onClose","openTermsDialog","status","classes","isLoading","setIsLoading","hasTermsOfServiceError","setHasTermsOfServiceError","isPasswordVisible","setIsPasswordVisible","registerTermsCheckbox","registerPassword","registerPasswordRepeat","register","current","checked","value","setTimeout","e","preventDefault","error","marginRight","event","keyCode","display","marginTop","spacing","propTypes","object","isRequired","func","string","withTheme"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  FormHelperText,\r\n  TextField,\r\n  Button,\r\n  Checkbox,\r\n  Typography,\r\n  FormControlLabel,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport FormDialog from \"../../../shared/components/FormDialog\";\r\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\r\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\r\nimport VisibilityPasswordTextField from \"../../../shared/components/VisibilityPasswordTextField\";\r\n\r\nconst styles = (theme) => ({\r\n  link: {\r\n    transition: theme.transitions.create([\"background-color\"], {\r\n      duration: theme.transitions.duration.complex,\r\n      easing: theme.transitions.easing.easeInOut,\r\n    }),\r\n    cursor: \"pointer\",\r\n    color: theme.palette.primary.main,\r\n    \"&:enabled:hover\": {\r\n      color: theme.palette.primary.dark,\r\n    },\r\n    \"&:enabled:focus\": {\r\n      color: theme.palette.primary.dark,\r\n    },\r\n  },\r\n});\r\n\r\nfunction RegisterDialog(props) {\r\n  const { setStatus, theme, onClose, openTermsDialog, status, classes } = props;\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [hasTermsOfServiceError, setHasTermsOfServiceError] = useState(false);\r\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n  const registerTermsCheckbox = useRef();\r\n  const registerPassword = useRef();\r\n  const registerPasswordRepeat = useRef();\r\n\r\n  const register = useCallback(() => {\r\n    if (!registerTermsCheckbox.current.checked) {\r\n      setHasTermsOfServiceError(true);\r\n      return;\r\n    }\r\n    if (\r\n      registerPassword.current.value !== registerPasswordRepeat.current.value\r\n    ) {\r\n      setStatus(\"passwordsDontMatch\");\r\n      return;\r\n    }\r\n    setStatus(null);\r\n    setIsLoading(true);\r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n    }, 1500);\r\n  }, [\r\n    setIsLoading,\r\n    setStatus,\r\n    setHasTermsOfServiceError,\r\n    registerPassword,\r\n    registerPasswordRepeat,\r\n    registerTermsCheckbox,\r\n  ]);\r\n\r\n  return (\r\n    <FormDialog\r\n      loading={isLoading}\r\n      onClose={onClose}\r\n      open\r\n      headline=\"Register\"\r\n      onFormSubmit={(e) => {\r\n        e.preventDefault();\r\n        register();\r\n      }}\r\n      hideBackdrop\r\n      hasCloseIcon\r\n      content={\r\n        <Fragment>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            error={status === \"invalidEmail\"}\r\n            label=\"Email Address\"\r\n            autoFocus\r\n            autoComplete=\"off\"\r\n            type=\"email\"\r\n            onChange={() => {\r\n              if (status === \"invalidEmail\") {\r\n                setStatus(null);\r\n              }\r\n            }}\r\n            FormHelperTextProps={{ error: true }}\r\n          />\r\n          <VisibilityPasswordTextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            error={\r\n              status === \"passwordTooShort\" || status === \"passwordsDontMatch\"\r\n            }\r\n            label=\"Password\"\r\n            inputRef={registerPassword}\r\n            autoComplete=\"off\"\r\n            onChange={() => {\r\n              if (\r\n                status === \"passwordTooShort\" ||\r\n                status === \"passwordsDontMatch\"\r\n              ) {\r\n                setStatus(null);\r\n              }\r\n            }}\r\n            helperText={(() => {\r\n              if (status === \"passwordTooShort\") {\r\n                return \"Create a password at least 6 characters long.\";\r\n              }\r\n              if (status === \"passwordsDontMatch\") {\r\n                return \"Your passwords dont match.\";\r\n              }\r\n              return null;\r\n            })()}\r\n            FormHelperTextProps={{ error: true }}\r\n            isVisible={isPasswordVisible}\r\n            onVisibilityChange={setIsPasswordVisible}\r\n          />\r\n          <VisibilityPasswordTextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            error={\r\n              status === \"passwordTooShort\" || status === \"passwordsDontMatch\"\r\n            }\r\n            label=\"Repeat Password\"\r\n            inputRef={registerPasswordRepeat}\r\n            autoComplete=\"off\"\r\n            onChange={() => {\r\n              if (\r\n                status === \"passwordTooShort\" ||\r\n                status === \"passwordsDontMatch\"\r\n              ) {\r\n                setStatus(null);\r\n              }\r\n            }}\r\n            helperText={(() => {\r\n              if (status === \"passwordTooShort\") {\r\n                return \"Create a password at least 6 characters long.\";\r\n              }\r\n              if (status === \"passwordsDontMatch\") {\r\n                return \"Your passwords dont match.\";\r\n              }\r\n            })()}\r\n            FormHelperTextProps={{ error: true }}\r\n            isVisible={isPasswordVisible}\r\n            onVisibilityChange={setIsPasswordVisible}\r\n          />\r\n          <FormControlLabel\r\n            style={{ marginRight: 0 }}\r\n            control={\r\n              <Checkbox\r\n                color=\"primary\"\r\n                inputRef={registerTermsCheckbox}\r\n                onChange={() => {\r\n                  setHasTermsOfServiceError(false);\r\n                }}\r\n              />\r\n            }\r\n            label={\r\n              <Typography variant=\"body1\">\r\n                I agree to the\r\n                <span\r\n                  className={classes.link}\r\n                  onClick={isLoading ? null : openTermsDialog}\r\n                  tabIndex={0}\r\n                  role=\"button\"\r\n                  onKeyDown={(event) => {\r\n                    // For screenreaders listen to space and enter events\r\n                    if (\r\n                      (!isLoading && event.keyCode === 13) ||\r\n                      event.keyCode === 32\r\n                    ) {\r\n                      openTermsDialog();\r\n                    }\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  terms of service\r\n                </span>\r\n              </Typography>\r\n            }\r\n          />\r\n          {hasTermsOfServiceError && (\r\n            <FormHelperText\r\n              error\r\n              style={{\r\n                display: \"block\",\r\n                marginTop: theme.spacing(-1),\r\n              }}\r\n            >\r\n              In order to create an account, you have to accept our terms of\r\n              service.\r\n            </FormHelperText>\r\n          )}\r\n          {status === \"accountCreated\" ? (\r\n            <HighlightedInformation>\r\n              We have created your account. Please click on the link in the\r\n              email we have sent to you before logging in.\r\n            </HighlightedInformation>\r\n          ) : (\r\n            <HighlightedInformation>\r\n              Registration is disabled until we go live.\r\n            </HighlightedInformation>\r\n          )}\r\n        </Fragment>\r\n      }\r\n      actions={\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          color=\"secondary\"\r\n          disabled={isLoading}\r\n        >\r\n          Register\r\n          {isLoading && <ButtonCircularProgress />}\r\n        </Button>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nRegisterDialog.propTypes = {\r\n  theme: PropTypes.object.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  openTermsDialog: PropTypes.func.isRequired,\r\n  status: PropTypes.string,\r\n  setStatus: PropTypes.func.isRequired,\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(RegisterDialog);\r\n"]},"metadata":{},"sourceType":"module"}