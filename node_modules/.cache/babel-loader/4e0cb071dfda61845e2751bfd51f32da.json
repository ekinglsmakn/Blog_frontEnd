{"ast":null,"code":"var _jsxFileName = \"C:\\\\ms_blog\\\\mainProject\\\\F4\\\\src\\\\shared\\\\components\\\\ConsecutiveSnackbarMessages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Snackbar, withStyles } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  root: {\n    backgroundColor: theme.palette.primary.main,\n    paddingTop: 0,\n    paddingBottom: 0\n  }\n});\n\nfunction ConsecutiveSnackbars(props) {\n  _s();\n\n  const {\n    classes,\n    getPushMessageFromChild\n  } = props;\n  const [isOpen, setIsOpen] = useState(false);\n  const [messageInfo, setMessageInfo] = useState({});\n  const queue = useRef([]);\n  const processQueue = useCallback(() => {\n    if (queue.current.length > 0) {\n      setMessageInfo(queue.current.shift());\n      setIsOpen(true);\n    }\n  }, [setMessageInfo, setIsOpen, queue]);\n  const handleClose = useCallback((_, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setIsOpen(false);\n  }, [setIsOpen]);\n  const pushMessage = useCallback(message => {\n    queue.current.push({\n      message,\n      key: new Date().getTime()\n    });\n\n    if (isOpen) {\n      // immediately begin dismissing current message\n      // to start showing new one\n      setIsOpen(false);\n    } else {\n      processQueue();\n    }\n  }, [queue, isOpen, setIsOpen, processQueue]);\n  useEffect(() => {\n    getPushMessageFromChild(pushMessage);\n  }, [getPushMessageFromChild, pushMessage]);\n  return /*#__PURE__*/_jsxDEV(Snackbar, {\n    disableWindowBlurListener: true,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    open: isOpen,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    onExited: processQueue,\n    ContentProps: {\n      classes: {\n        root: classes.root\n      }\n    },\n    message: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: messageInfo.message ? messageInfo.message.text : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)\n  }, messageInfo.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ConsecutiveSnackbars, \"I+JwOuH5judQgEpsT8j6BbA3g5Q=\");\n\n_c = ConsecutiveSnackbars;\nConsecutiveSnackbars.propTypes = {\n  getPushMessageFromChild: PropTypes.func.isRequired,\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(ConsecutiveSnackbars);\n\nvar _c;\n\n$RefreshReg$(_c, \"ConsecutiveSnackbars\");","map":{"version":3,"sources":["C:/ms_blog/mainProject/F4/src/shared/components/ConsecutiveSnackbarMessages.js"],"names":["React","useCallback","useState","useRef","useEffect","PropTypes","Snackbar","withStyles","styles","theme","root","backgroundColor","palette","primary","main","paddingTop","paddingBottom","ConsecutiveSnackbars","props","classes","getPushMessageFromChild","isOpen","setIsOpen","messageInfo","setMessageInfo","queue","processQueue","current","length","shift","handleClose","_","reason","pushMessage","message","push","key","Date","getTime","vertical","horizontal","text","propTypes","func","isRequired","object","withTheme"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Snackbar, withStyles } from \"@material-ui/core\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n  },\r\n});\r\n\r\nfunction ConsecutiveSnackbars(props) {\r\n  const { classes, getPushMessageFromChild } = props;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messageInfo, setMessageInfo] = useState({});\r\n  const queue = useRef([]);\r\n\r\n  const processQueue = useCallback(() => {\r\n    if (queue.current.length > 0) {\r\n      setMessageInfo(queue.current.shift());\r\n      setIsOpen(true);\r\n    }\r\n  }, [setMessageInfo, setIsOpen, queue]);\r\n\r\n  const handleClose = useCallback((_, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setIsOpen(false);\r\n  }, [setIsOpen]);\r\n\r\n  const pushMessage = useCallback(message => {\r\n    queue.current.push({\r\n      message,\r\n      key: new Date().getTime(),\r\n    });\r\n    if (isOpen) {\r\n      // immediately begin dismissing current message\r\n      // to start showing new one\r\n      setIsOpen(false);\r\n    } else {\r\n      processQueue();\r\n    }\r\n  }, [queue, isOpen, setIsOpen, processQueue]);\r\n\r\n  useEffect(() => {\r\n    getPushMessageFromChild(pushMessage);\r\n  }, [getPushMessageFromChild, pushMessage]);\r\n\r\n  return (\r\n    <Snackbar\r\n      disableWindowBlurListener\r\n      key={messageInfo.key}\r\n      anchorOrigin={{\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\",\r\n      }}\r\n      open={isOpen}\r\n      autoHideDuration={6000}\r\n      onClose={handleClose}\r\n      onExited={processQueue}\r\n      ContentProps={{\r\n        classes: {\r\n          root: classes.root,\r\n        },\r\n      }}\r\n      message={\r\n        <span>{messageInfo.message ? messageInfo.message.text : null}</span>\r\n      }\r\n    />\r\n  );\r\n\r\n}\r\n\r\nConsecutiveSnackbars.propTypes = {\r\n  getPushMessageFromChild: PropTypes.func.isRequired,\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(ConsecutiveSnackbars);\r\n"]},"metadata":{},"sourceType":"module"}