{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eking\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\blogProject\\\\ms_blog\\\\mainProject\\\\F4\\\\src\\\\logged_in\\\\components\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useCallback, useState, useEffect, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core\";\nimport Routing from \"./Routing\";\nimport NavBar from \"./navigation/NavBar\";\nimport ConsecutiveSnackbarMessages from \"../../shared/components/ConsecutiveSnackbarMessages\";\nimport smoothScrollTop from \"../../shared/functions/smoothScrollTop\";\nimport persons from \"../dummy_data/persons\";\nimport LazyLoadAddBalanceDialog from \"./subscription/LazyLoadAddBalanceDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  main: {\n    marginLeft: theme.spacing(9),\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 0\n    }\n  }\n});\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction Main(props) {\n  _s();\n\n  const {\n    classes\n  } = props;\n  const [selectedTab, setSelectedTab] = useState(null);\n  const [CardChart, setCardChart] = useState(null);\n  const [hasFetchedCardChart, setHasFetchedCardChart] = useState(false);\n  const [EmojiTextArea, setEmojiTextArea] = useState(null);\n  const [hasFetchedEmojiTextArea, setHasFetchedEmojiTextArea] = useState(false);\n  const [ImageCropper, setImageCropper] = useState(null);\n  const [hasFetchedImageCropper, setHasFetchedImageCropper] = useState(false);\n  const [Dropzone, setDropzone] = useState(null);\n  const [hasFetchedDropzone, setHasFetchedDropzone] = useState(false);\n  const [DateTimePicker, setDateTimePicker] = useState(null);\n  const [hasFetchedDateTimePicker, setHasFetchedDateTimePicker] = useState(false);\n  const [transactions, setTransactions] = useState([]);\n  const [statistics, setStatistics] = useState({\n    views: [],\n    profit: []\n  });\n  const [posts, setPosts] = useState([]);\n  const [targets, setTargets] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [isAccountActivated, setIsAccountActivated] = useState(false);\n  const [isAddBalanceDialogOpen, setIsAddBalanceDialogOpen] = useState(false);\n  const [pushMessageToSnackbar, setPushMessageToSnackbar] = useState(null);\n  const fetchRandomTargets = useCallback(() => {\n    const targets = [];\n\n    for (let i = 0; i < 35; i += 1) {\n      const randomPerson = persons[Math.floor(Math.random() * persons.length)];\n      const target = {\n        id: i,\n        number1: Math.floor(Math.random() * 251),\n        number2: Math.floor(Math.random() * 251),\n        number3: Math.floor(Math.random() * 251),\n        number4: Math.floor(Math.random() * 251),\n        name: randomPerson.name,\n        profilePicUrl: randomPerson.src,\n        isActivated: Math.round(Math.random()) ? true : false\n      };\n      targets.push(target);\n    }\n\n    setTargets(targets);\n  }, [setTargets]);\n  const openAddBalanceDialog = useCallback(() => {\n    setIsAddBalanceDialogOpen(true);\n  }, [setIsAddBalanceDialogOpen]);\n  const closeAddBalanceDialog = useCallback(() => {\n    setIsAddBalanceDialogOpen(false);\n  }, [setIsAddBalanceDialogOpen]);\n  const onPaymentSuccess = useCallback(() => {\n    pushMessageToSnackbar({\n      text: \"Your balance has been updated.\"\n    });\n    setIsAddBalanceDialogOpen(false);\n  }, [pushMessageToSnackbar, setIsAddBalanceDialogOpen]);\n  const fetchRandomStatistics = useCallback(() => {\n    const statistics = {\n      profit: [],\n      views: []\n    };\n    const iterations = 300;\n    const oneYearSeconds = 60 * 60 * 24 * 365;\n    let curProfit = Math.round(3000 + Math.random() * 1000);\n    let curViews = Math.round(3000 + Math.random() * 1000);\n    let curUnix = Math.round(new Date().getTime() / 1000) - oneYearSeconds;\n\n    for (let i = 0; i < iterations; i += 1) {\n      curUnix += Math.round(oneYearSeconds / iterations);\n      curProfit += Math.round((Math.random() * 2 - 1) * 10);\n      curViews += Math.round((Math.random() * 2 - 1) * 10);\n      statistics.profit.push({\n        value: curProfit,\n        timestamp: curUnix\n      });\n      statistics.views.push({\n        value: curViews,\n        timestamp: curUnix\n      });\n    }\n\n    setStatistics(statistics);\n  }, [setStatistics]);\n  const fetchRandomTransactions = useCallback(() => {\n    const transactions = [];\n    const iterations = 32;\n    const oneMonthSeconds = Math.round(60 * 60 * 24 * 30.5);\n    const transactionTemplates = [{\n      description: \"Starter subscription\",\n      isSubscription: true,\n      balanceChange: -1499\n    }, {\n      description: \"Premium subscription\",\n      isSubscription: true,\n      balanceChange: -2999\n    }, {\n      description: \"Business subscription\",\n      isSubscription: true,\n      balanceChange: -4999\n    }, {\n      description: \"Tycoon subscription\",\n      isSubscription: true,\n      balanceChange: -9999\n    }, {\n      description: \"Added funds\",\n      isSubscription: false,\n      balanceChange: 2000\n    }, {\n      description: \"Added funds\",\n      isSubscription: false,\n      balanceChange: 5000\n    }];\n    let curUnix = Math.round(new Date().getTime() / 1000 - iterations * oneMonthSeconds);\n\n    for (let i = 0; i < iterations; i += 1) {\n      const randomTransactionTemplate = transactionTemplates[Math.floor(Math.random() * transactionTemplates.length)];\n      const transaction = {\n        id: i,\n        description: randomTransactionTemplate.description,\n        balanceChange: randomTransactionTemplate.balanceChange,\n        paidUntil: curUnix + oneMonthSeconds,\n        timestamp: curUnix\n      };\n      curUnix += oneMonthSeconds;\n      transactions.push(transaction);\n    }\n\n    transactions.reverse();\n    setTransactions(transactions);\n  }, [setTransactions]);\n  const fetchRandomMessages = useCallback(() => {\n    shuffle(persons);\n    const messages = [];\n    const iterations = persons.length;\n    const oneDaySeconds = 60 * 60 * 24;\n    let curUnix = Math.round(new Date().getTime() / 1000 - iterations * oneDaySeconds);\n\n    for (let i = 0; i < iterations; i += 1) {\n      const person = persons[i];\n      const message = {\n        id: i,\n        src: person.src,\n        date: curUnix,\n        text: \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr sed.\"\n      };\n      curUnix += oneDaySeconds;\n      messages.push(message);\n    }\n\n    messages.reverse();\n    setMessages(messages);\n  }, [setMessages]);\n  const fetchRandomPosts = useCallback(() => {\n    shuffle(persons);\n    const posts = [];\n    const iterations = persons.length;\n    const oneDaySeconds = 60 * 60 * 24;\n    let curUnix = Math.round(new Date().getTime() / 1000 - iterations * oneDaySeconds);\n\n    for (let i = 0; i < iterations; i += 1) {\n      const person = persons[i];\n      const post = {\n        id: i,\n        src: person.src,\n        timestamp: curUnix,\n        name: person.name\n      };\n      curUnix += oneDaySeconds;\n      posts.push(post);\n    }\n\n    posts.reverse();\n    setPosts(posts);\n  }, [setPosts]);\n  const toggleAccountActivation = useCallback(() => {\n    if (pushMessageToSnackbar) {\n      if (isAccountActivated) {\n        pushMessageToSnackbar({\n          text: \"Your account is now deactivated.\"\n        });\n      } else {\n        pushMessageToSnackbar({\n          text: \"Your account is now activated.\"\n        });\n      }\n    }\n\n    setIsAccountActivated(!isAccountActivated);\n  }, [pushMessageToSnackbar, isAccountActivated, setIsAccountActivated]);\n  const selectDashboard = useCallback(() => {\n    smoothScrollTop();\n    document.title = \"WaVer - Dashboard\";\n    setSelectedTab(\"Dashboard\");\n\n    if (!hasFetchedCardChart) {\n      setHasFetchedCardChart(true);\n      import(\"../../shared/components/CardChart\").then(Component => {\n        setCardChart(Component.default);\n      });\n    }\n  }, [setSelectedTab, setCardChart, hasFetchedCardChart, setHasFetchedCardChart]);\n  const selectPosts = useCallback(() => {\n    smoothScrollTop();\n    document.title = \"WaVer - Posts\";\n    setSelectedTab(\"Posts\");\n\n    if (!hasFetchedEmojiTextArea) {\n      setHasFetchedEmojiTextArea(true);\n      import(\"../../shared/components/EmojiTextArea\").then(Component => {\n        setEmojiTextArea(Component.default);\n      });\n    }\n\n    if (!hasFetchedImageCropper) {\n      setHasFetchedImageCropper(true);\n      import(\"../../shared/components/ImageCropper\").then(Component => {\n        setImageCropper(Component.default);\n      });\n    }\n\n    if (!hasFetchedDropzone) {\n      setHasFetchedDropzone(true);\n      import(\"../../shared/components/Dropzone\").then(Component => {\n        setDropzone(Component.default);\n      });\n    }\n\n    if (!hasFetchedDateTimePicker) {\n      setHasFetchedDateTimePicker(true);\n      import(\"../../shared/components/DateTimePicker\").then(Component => {\n        setDateTimePicker(Component.default);\n      });\n    }\n  }, [setSelectedTab, setEmojiTextArea, setImageCropper, setDropzone, setDateTimePicker, hasFetchedEmojiTextArea, setHasFetchedEmojiTextArea, hasFetchedImageCropper, setHasFetchedImageCropper, hasFetchedDropzone, setHasFetchedDropzone, hasFetchedDateTimePicker, setHasFetchedDateTimePicker]);\n  const selectSubscription = useCallback(() => {\n    smoothScrollTop();\n    document.title = \"WaVer - Subscription\";\n    setSelectedTab(\"Subscription\");\n  }, [setSelectedTab]);\n  const getPushMessageFromChild = useCallback(pushMessage => {\n    setPushMessageToSnackbar(() => pushMessage);\n  }, [setPushMessageToSnackbar]);\n  useEffect(() => {\n    fetchRandomTargets();\n    fetchRandomStatistics();\n    fetchRandomTransactions();\n    fetchRandomMessages();\n    fetchRandomPosts();\n  }, [fetchRandomTargets, fetchRandomStatistics, fetchRandomTransactions, fetchRandomMessages, fetchRandomPosts]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LazyLoadAddBalanceDialog, {\n      open: isAddBalanceDialogOpen,\n      onClose: closeAddBalanceDialog,\n      onSuccess: onPaymentSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavBar, {\n      selectedTab: selectedTab,\n      messages: messages,\n      openAddBalanceDialog: openAddBalanceDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConsecutiveSnackbarMessages, {\n      getPushMessageFromChild: getPushMessageFromChild\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: classNames(classes.main),\n      children: /*#__PURE__*/_jsxDEV(Routing, {\n        isAccountActivated: isAccountActivated,\n        ImageCropper: ImageCropper,\n        EmojiTextArea: EmojiTextArea,\n        CardChart: CardChart,\n        Dropzone: Dropzone,\n        DateTimePicker: DateTimePicker,\n        toggleAccountActivation: toggleAccountActivation,\n        pushMessageToSnackbar: pushMessageToSnackbar,\n        transactions: transactions,\n        statistics: statistics,\n        posts: posts,\n        targets: targets,\n        selectDashboard: selectDashboard,\n        selectPosts: selectPosts,\n        selectSubscription: selectSubscription,\n        openAddBalanceDialog: openAddBalanceDialog,\n        setTargets: setTargets,\n        setPosts: setPosts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"7Tz/k/m9fQWXfkHAYoD1jfoQbHI=\");\n\n_c = Main;\nMain.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles, {\n  withTheme: true\n})( /*#__PURE__*/memo(Main));\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/eking/OneDrive/Masaüstü/blogProject/ms_blog/mainProject/F4/src/logged_in/components/Main.js"],"names":["React","memo","useCallback","useState","useEffect","Fragment","PropTypes","classNames","withStyles","Routing","NavBar","ConsecutiveSnackbarMessages","smoothScrollTop","persons","LazyLoadAddBalanceDialog","styles","theme","main","marginLeft","spacing","transition","transitions","create","easing","sharp","duration","leavingScreen","breakpoints","down","shuffle","array","i","length","j","Math","floor","random","Main","props","classes","selectedTab","setSelectedTab","CardChart","setCardChart","hasFetchedCardChart","setHasFetchedCardChart","EmojiTextArea","setEmojiTextArea","hasFetchedEmojiTextArea","setHasFetchedEmojiTextArea","ImageCropper","setImageCropper","hasFetchedImageCropper","setHasFetchedImageCropper","Dropzone","setDropzone","hasFetchedDropzone","setHasFetchedDropzone","DateTimePicker","setDateTimePicker","hasFetchedDateTimePicker","setHasFetchedDateTimePicker","transactions","setTransactions","statistics","setStatistics","views","profit","posts","setPosts","targets","setTargets","messages","setMessages","isAccountActivated","setIsAccountActivated","isAddBalanceDialogOpen","setIsAddBalanceDialogOpen","pushMessageToSnackbar","setPushMessageToSnackbar","fetchRandomTargets","randomPerson","target","id","number1","number2","number3","number4","name","profilePicUrl","src","isActivated","round","push","openAddBalanceDialog","closeAddBalanceDialog","onPaymentSuccess","text","fetchRandomStatistics","iterations","oneYearSeconds","curProfit","curViews","curUnix","Date","getTime","value","timestamp","fetchRandomTransactions","oneMonthSeconds","transactionTemplates","description","isSubscription","balanceChange","randomTransactionTemplate","transaction","paidUntil","reverse","fetchRandomMessages","oneDaySeconds","person","message","date","fetchRandomPosts","post","toggleAccountActivation","selectDashboard","document","title","then","Component","default","selectPosts","selectSubscription","getPushMessageFromChild","pushMessage","propTypes","object","isRequired","withTheme"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,QAAnC,EAA6CC,SAA7C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,2BAAP,MAAwC,qDAAxC;AACA,OAAOC,eAAP,MAA4B,wCAA5B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,wBAAP,MAAqC,yCAArC;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,KAAY;AACzBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADR;AAEJC,IAAAA,UAAU,EAAEJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyB,CAAC,OAAD,EAAU,QAAV,CAAzB,EAA8C;AACxDC,MAAAA,MAAM,EAAEP,KAAK,CAACK,WAAN,CAAkBE,MAAlB,CAAyBC,KADuB;AAExDC,MAAAA,QAAQ,EAAET,KAAK,CAACK,WAAN,CAAkBI,QAAlB,CAA2BC;AAFmB,KAA9C,CAFR;AAMJ,KAACV,KAAK,CAACW,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AAC9BV,MAAAA,UAAU,EAAE;AADkB;AAN5B;AADmB,CAAZ,CAAf;;AAaA,SAASW,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,OAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+BD,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,QAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,KAACD,KAAK,CAACC,CAAD,CAAN,EAAWD,KAAK,CAACG,CAAD,CAAhB,IAAuB,CAACH,KAAK,CAACG,CAAD,CAAN,EAAWH,KAAK,CAACC,CAAD,CAAhB,CAAvB;AACD;AACF;;AAED,SAASM,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AACA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCtC,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACuC,SAAD,EAAYC,YAAZ,IAA4BxC,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACyC,mBAAD,EAAsBC,sBAAtB,IAAgD1C,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAM,CAAC2C,aAAD,EAAgBC,gBAAhB,IAAoC5C,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAAC6C,uBAAD,EAA0BC,0BAA1B,IAAwD9C,QAAQ,CAAC,KAAD,CAAtE;AACA,QAAM,CAAC+C,YAAD,EAAeC,eAAf,IAAkChD,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACiD,sBAAD,EAAyBC,yBAAzB,IAAsDlD,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM,CAACmD,QAAD,EAAWC,WAAX,IAA0BpD,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACqD,kBAAD,EAAqBC,qBAArB,IAA8CtD,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACuD,cAAD,EAAiBC,iBAAjB,IAAsCxD,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACyD,wBAAD,EAA2BC,2BAA3B,IAA0D1D,QAAQ,CACtE,KADsE,CAAxE;AAGA,QAAM,CAAC2D,YAAD,EAAeC,eAAf,IAAkC5D,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAC6D,UAAD,EAAaC,aAAb,IAA8B9D,QAAQ,CAAC;AAAE+D,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAAD,CAA5C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlE,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACmE,OAAD,EAAUC,UAAV,IAAwBpE,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACqE,QAAD,EAAWC,WAAX,IAA0BtE,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACuE,kBAAD,EAAqBC,qBAArB,IAA8CxE,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACyE,sBAAD,EAAyBC,yBAAzB,IAAsD1E,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM,CAAC2E,qBAAD,EAAwBC,wBAAxB,IAAoD5E,QAAQ,CAAC,IAAD,CAAlE;AAEA,QAAM6E,kBAAkB,GAAG9E,WAAW,CAAC,MAAM;AAC3C,UAAMoE,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIvC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9B,YAAMkD,YAAY,GAAGpE,OAAO,CAACqB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBvB,OAAO,CAACmB,MAAnC,CAAD,CAA5B;AACA,YAAMkD,MAAM,GAAG;AACbC,QAAAA,EAAE,EAAEpD,CADS;AAEbqD,QAAAA,OAAO,EAAElD,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAFI;AAGbiD,QAAAA,OAAO,EAAEnD,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAHI;AAIbkD,QAAAA,OAAO,EAAEpD,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAJI;AAKbmD,QAAAA,OAAO,EAAErD,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CALI;AAMboD,QAAAA,IAAI,EAAEP,YAAY,CAACO,IANN;AAObC,QAAAA,aAAa,EAAER,YAAY,CAACS,GAPf;AAQbC,QAAAA,WAAW,EAAEzD,IAAI,CAAC0D,KAAL,CAAW1D,IAAI,CAACE,MAAL,EAAX,IAA4B,IAA5B,GAAmC;AARnC,OAAf;AAUAkC,MAAAA,OAAO,CAACuB,IAAR,CAAaX,MAAb;AACD;;AACDX,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD,GAjBqC,EAiBnC,CAACC,UAAD,CAjBmC,CAAtC;AAmBA,QAAMuB,oBAAoB,GAAG5F,WAAW,CAAC,MAAM;AAC7C2E,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD,GAFuC,EAErC,CAACA,yBAAD,CAFqC,CAAxC;AAIA,QAAMkB,qBAAqB,GAAG7F,WAAW,CAAC,MAAM;AAC9C2E,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,GAFwC,EAEtC,CAACA,yBAAD,CAFsC,CAAzC;AAIA,QAAMmB,gBAAgB,GAAG9F,WAAW,CAAC,MAAM;AACzC4E,IAAAA,qBAAqB,CAAC;AACpBmB,MAAAA,IAAI,EAAE;AADc,KAAD,CAArB;AAGApB,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,GALmC,EAKjC,CAACC,qBAAD,EAAwBD,yBAAxB,CALiC,CAApC;AAOA,QAAMqB,qBAAqB,GAAGhG,WAAW,CAAC,MAAM;AAC9C,UAAM8D,UAAU,GAAG;AAAEG,MAAAA,MAAM,EAAE,EAAV;AAAcD,MAAAA,KAAK,EAAE;AAArB,KAAnB;AACA,UAAMiC,UAAU,GAAG,GAAnB;AACA,UAAMC,cAAc,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,GAAtC;AACA,QAAIC,SAAS,GAAGnE,IAAI,CAAC0D,KAAL,CAAW,OAAO1D,IAAI,CAACE,MAAL,KAAgB,IAAlC,CAAhB;AACA,QAAIkE,QAAQ,GAAGpE,IAAI,CAAC0D,KAAL,CAAW,OAAO1D,IAAI,CAACE,MAAL,KAAgB,IAAlC,CAAf;AACA,QAAImE,OAAO,GAAGrE,IAAI,CAAC0D,KAAL,CAAW,IAAIY,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,IAA0CL,cAAxD;;AACA,SAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoE,UAApB,EAAgCpE,CAAC,IAAI,CAArC,EAAwC;AACtCwE,MAAAA,OAAO,IAAIrE,IAAI,CAAC0D,KAAL,CAAWQ,cAAc,GAAGD,UAA5B,CAAX;AACAE,MAAAA,SAAS,IAAInE,IAAI,CAAC0D,KAAL,CAAW,CAAC1D,IAAI,CAACE,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0B,EAArC,CAAb;AACAkE,MAAAA,QAAQ,IAAIpE,IAAI,CAAC0D,KAAL,CAAW,CAAC1D,IAAI,CAACE,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0B,EAArC,CAAZ;AACA4B,MAAAA,UAAU,CAACG,MAAX,CAAkB0B,IAAlB,CAAuB;AACrBa,QAAAA,KAAK,EAAEL,SADc;AAErBM,QAAAA,SAAS,EAAEJ;AAFU,OAAvB;AAIAvC,MAAAA,UAAU,CAACE,KAAX,CAAiB2B,IAAjB,CAAsB;AACpBa,QAAAA,KAAK,EAAEJ,QADa;AAEpBK,QAAAA,SAAS,EAAEJ;AAFS,OAAtB;AAID;;AACDtC,IAAAA,aAAa,CAACD,UAAD,CAAb;AACD,GArBwC,EAqBtC,CAACC,aAAD,CArBsC,CAAzC;AAuBA,QAAM2C,uBAAuB,GAAG1G,WAAW,CAAC,MAAM;AAChD,UAAM4D,YAAY,GAAG,EAArB;AACA,UAAMqC,UAAU,GAAG,EAAnB;AACA,UAAMU,eAAe,GAAG3E,IAAI,CAAC0D,KAAL,CAAW,KAAK,EAAL,GAAU,EAAV,GAAe,IAA1B,CAAxB;AACA,UAAMkB,oBAAoB,GAAG,CAC3B;AACEC,MAAAA,WAAW,EAAE,sBADf;AAEEC,MAAAA,cAAc,EAAE,IAFlB;AAGEC,MAAAA,aAAa,EAAE,CAAC;AAHlB,KAD2B,EAM3B;AACEF,MAAAA,WAAW,EAAE,sBADf;AAEEC,MAAAA,cAAc,EAAE,IAFlB;AAGEC,MAAAA,aAAa,EAAE,CAAC;AAHlB,KAN2B,EAW3B;AACEF,MAAAA,WAAW,EAAE,uBADf;AAEEC,MAAAA,cAAc,EAAE,IAFlB;AAGEC,MAAAA,aAAa,EAAE,CAAC;AAHlB,KAX2B,EAgB3B;AACEF,MAAAA,WAAW,EAAE,qBADf;AAEEC,MAAAA,cAAc,EAAE,IAFlB;AAGEC,MAAAA,aAAa,EAAE,CAAC;AAHlB,KAhB2B,EAqB3B;AACEF,MAAAA,WAAW,EAAE,aADf;AAEEC,MAAAA,cAAc,EAAE,KAFlB;AAGEC,MAAAA,aAAa,EAAE;AAHjB,KArB2B,EA0B3B;AACEF,MAAAA,WAAW,EAAE,aADf;AAEEC,MAAAA,cAAc,EAAE,KAFlB;AAGEC,MAAAA,aAAa,EAAE;AAHjB,KA1B2B,CAA7B;AAgCA,QAAIV,OAAO,GAAGrE,IAAI,CAAC0D,KAAL,CACZ,IAAIY,IAAJ,GAAWC,OAAX,KAAuB,IAAvB,GAA8BN,UAAU,GAAGU,eAD/B,CAAd;;AAGA,SAAK,IAAI9E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoE,UAApB,EAAgCpE,CAAC,IAAI,CAArC,EAAwC;AACtC,YAAMmF,yBAAyB,GAC7BJ,oBAAoB,CAClB5E,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB0E,oBAAoB,CAAC9E,MAAhD,CADkB,CADtB;AAIA,YAAMmF,WAAW,GAAG;AAClBhC,QAAAA,EAAE,EAAEpD,CADc;AAElBgF,QAAAA,WAAW,EAAEG,yBAAyB,CAACH,WAFrB;AAGlBE,QAAAA,aAAa,EAAEC,yBAAyB,CAACD,aAHvB;AAIlBG,QAAAA,SAAS,EAAEb,OAAO,GAAGM,eAJH;AAKlBF,QAAAA,SAAS,EAAEJ;AALO,OAApB;AAOAA,MAAAA,OAAO,IAAIM,eAAX;AACA/C,MAAAA,YAAY,CAAC+B,IAAb,CAAkBsB,WAAlB;AACD;;AACDrD,IAAAA,YAAY,CAACuD,OAAb;AACAtD,IAAAA,eAAe,CAACD,YAAD,CAAf;AACD,GAxD0C,EAwDxC,CAACC,eAAD,CAxDwC,CAA3C;AA0DA,QAAMuD,mBAAmB,GAAGpH,WAAW,CAAC,MAAM;AAC5C2B,IAAAA,OAAO,CAAChB,OAAD,CAAP;AACA,UAAM2D,QAAQ,GAAG,EAAjB;AACA,UAAM2B,UAAU,GAAGtF,OAAO,CAACmB,MAA3B;AACA,UAAMuF,aAAa,GAAG,KAAK,EAAL,GAAU,EAAhC;AACA,QAAIhB,OAAO,GAAGrE,IAAI,CAAC0D,KAAL,CACZ,IAAIY,IAAJ,GAAWC,OAAX,KAAuB,IAAvB,GAA8BN,UAAU,GAAGoB,aAD/B,CAAd;;AAGA,SAAK,IAAIxF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoE,UAApB,EAAgCpE,CAAC,IAAI,CAArC,EAAwC;AACtC,YAAMyF,MAAM,GAAG3G,OAAO,CAACkB,CAAD,CAAtB;AACA,YAAM0F,OAAO,GAAG;AACdtC,QAAAA,EAAE,EAAEpD,CADU;AAEd2D,QAAAA,GAAG,EAAE8B,MAAM,CAAC9B,GAFE;AAGdgC,QAAAA,IAAI,EAAEnB,OAHQ;AAIdN,QAAAA,IAAI,EAAE;AAJQ,OAAhB;AAMAM,MAAAA,OAAO,IAAIgB,aAAX;AACA/C,MAAAA,QAAQ,CAACqB,IAAT,CAAc4B,OAAd;AACD;;AACDjD,IAAAA,QAAQ,CAAC6C,OAAT;AACA5C,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GArBsC,EAqBpC,CAACC,WAAD,CArBoC,CAAvC;AAuBA,QAAMkD,gBAAgB,GAAGzH,WAAW,CAAC,MAAM;AACzC2B,IAAAA,OAAO,CAAChB,OAAD,CAAP;AACA,UAAMuD,KAAK,GAAG,EAAd;AACA,UAAM+B,UAAU,GAAGtF,OAAO,CAACmB,MAA3B;AACA,UAAMuF,aAAa,GAAG,KAAK,EAAL,GAAU,EAAhC;AACA,QAAIhB,OAAO,GAAGrE,IAAI,CAAC0D,KAAL,CACZ,IAAIY,IAAJ,GAAWC,OAAX,KAAuB,IAAvB,GAA8BN,UAAU,GAAGoB,aAD/B,CAAd;;AAGA,SAAK,IAAIxF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoE,UAApB,EAAgCpE,CAAC,IAAI,CAArC,EAAwC;AACtC,YAAMyF,MAAM,GAAG3G,OAAO,CAACkB,CAAD,CAAtB;AACA,YAAM6F,IAAI,GAAG;AACXzC,QAAAA,EAAE,EAAEpD,CADO;AAEX2D,QAAAA,GAAG,EAAE8B,MAAM,CAAC9B,GAFD;AAGXiB,QAAAA,SAAS,EAAEJ,OAHA;AAIXf,QAAAA,IAAI,EAAEgC,MAAM,CAAChC;AAJF,OAAb;AAMAe,MAAAA,OAAO,IAAIgB,aAAX;AACAnD,MAAAA,KAAK,CAACyB,IAAN,CAAW+B,IAAX;AACD;;AACDxD,IAAAA,KAAK,CAACiD,OAAN;AACAhD,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GArBmC,EAqBjC,CAACC,QAAD,CArBiC,CAApC;AAuBA,QAAMwD,uBAAuB,GAAG3H,WAAW,CAAC,MAAM;AAChD,QAAI4E,qBAAJ,EAA2B;AACzB,UAAIJ,kBAAJ,EAAwB;AACtBI,QAAAA,qBAAqB,CAAC;AACpBmB,UAAAA,IAAI,EAAE;AADc,SAAD,CAArB;AAGD,OAJD,MAIO;AACLnB,QAAAA,qBAAqB,CAAC;AACpBmB,UAAAA,IAAI,EAAE;AADc,SAAD,CAArB;AAGD;AACF;;AACDtB,IAAAA,qBAAqB,CAAC,CAACD,kBAAF,CAArB;AACD,GAb0C,EAaxC,CAACI,qBAAD,EAAwBJ,kBAAxB,EAA4CC,qBAA5C,CAbwC,CAA3C;AAeA,QAAMmD,eAAe,GAAG5H,WAAW,CAAC,MAAM;AACxCU,IAAAA,eAAe;AACfmH,IAAAA,QAAQ,CAACC,KAAT,GAAiB,mBAAjB;AACAvF,IAAAA,cAAc,CAAC,WAAD,CAAd;;AACA,QAAI,CAACG,mBAAL,EAA0B;AACxBC,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACA,aAAO,mCAAP,EAA4CoF,IAA5C,CAAkDC,SAAD,IAAe;AAC9DvF,QAAAA,YAAY,CAACuF,SAAS,CAACC,OAAX,CAAZ;AACD,OAFD;AAGD;AACF,GAVkC,EAUhC,CACD1F,cADC,EAEDE,YAFC,EAGDC,mBAHC,EAIDC,sBAJC,CAVgC,CAAnC;AAiBA,QAAMuF,WAAW,GAAGlI,WAAW,CAAC,MAAM;AACpCU,IAAAA,eAAe;AACfmH,IAAAA,QAAQ,CAACC,KAAT,GAAiB,eAAjB;AACAvF,IAAAA,cAAc,CAAC,OAAD,CAAd;;AACA,QAAI,CAACO,uBAAL,EAA8B;AAC5BC,MAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACA,aAAO,uCAAP,EAAgDgF,IAAhD,CAAsDC,SAAD,IAAe;AAClEnF,QAAAA,gBAAgB,CAACmF,SAAS,CAACC,OAAX,CAAhB;AACD,OAFD;AAGD;;AACD,QAAI,CAAC/E,sBAAL,EAA6B;AAC3BC,MAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACA,aAAO,sCAAP,EAA+C4E,IAA/C,CAAqDC,SAAD,IAAe;AACjE/E,QAAAA,eAAe,CAAC+E,SAAS,CAACC,OAAX,CAAf;AACD,OAFD;AAGD;;AACD,QAAI,CAAC3E,kBAAL,EAAyB;AACvBC,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACA,aAAO,kCAAP,EAA2CwE,IAA3C,CAAiDC,SAAD,IAAe;AAC7D3E,QAAAA,WAAW,CAAC2E,SAAS,CAACC,OAAX,CAAX;AACD,OAFD;AAGD;;AACD,QAAI,CAACvE,wBAAL,EAA+B;AAC7BC,MAAAA,2BAA2B,CAAC,IAAD,CAA3B;AACA,aAAO,wCAAP,EAAiDoE,IAAjD,CAAuDC,SAAD,IAAe;AACnEvE,QAAAA,iBAAiB,CAACuE,SAAS,CAACC,OAAX,CAAjB;AACD,OAFD;AAGD;AACF,GA5B8B,EA4B5B,CACD1F,cADC,EAEDM,gBAFC,EAGDI,eAHC,EAIDI,WAJC,EAKDI,iBALC,EAMDX,uBANC,EAODC,0BAPC,EAQDG,sBARC,EASDC,yBATC,EAUDG,kBAVC,EAWDC,qBAXC,EAYDG,wBAZC,EAaDC,2BAbC,CA5B4B,CAA/B;AA4CA,QAAMwE,kBAAkB,GAAGnI,WAAW,CAAC,MAAM;AAC3CU,IAAAA,eAAe;AACfmH,IAAAA,QAAQ,CAACC,KAAT,GAAiB,sBAAjB;AACAvF,IAAAA,cAAc,CAAC,cAAD,CAAd;AACD,GAJqC,EAInC,CAACA,cAAD,CAJmC,CAAtC;AAMA,QAAM6F,uBAAuB,GAAGpI,WAAW,CACxCqI,WAAD,IAAiB;AACfxD,IAAAA,wBAAwB,CAAC,MAAMwD,WAAP,CAAxB;AACD,GAHwC,EAIzC,CAACxD,wBAAD,CAJyC,CAA3C;AAOA3E,EAAAA,SAAS,CAAC,MAAM;AACd4E,IAAAA,kBAAkB;AAClBkB,IAAAA,qBAAqB;AACrBU,IAAAA,uBAAuB;AACvBU,IAAAA,mBAAmB;AACnBK,IAAAA,gBAAgB;AACjB,GANQ,EAMN,CACD3C,kBADC,EAEDkB,qBAFC,EAGDU,uBAHC,EAIDU,mBAJC,EAKDK,gBALC,CANM,CAAT;AAcA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,wBAAD;AACE,MAAA,IAAI,EAAE/C,sBADR;AAEE,MAAA,OAAO,EAAEmB,qBAFX;AAGE,MAAA,SAAS,EAAEC;AAHb;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,MAAD;AACE,MAAA,WAAW,EAAExD,WADf;AAEE,MAAA,QAAQ,EAAEgC,QAFZ;AAGE,MAAA,oBAAoB,EAAEsB;AAHxB;AAAA;AAAA;AAAA;AAAA,YANF,eAWE,QAAC,2BAAD;AACE,MAAA,uBAAuB,EAAEwC;AAD3B;AAAA;AAAA;AAAA;AAAA,YAXF,eAcE;AAAM,MAAA,SAAS,EAAE/H,UAAU,CAACgC,OAAO,CAACtB,IAAT,CAA3B;AAAA,6BACE,QAAC,OAAD;AACE,QAAA,kBAAkB,EAAEyD,kBADtB;AAEE,QAAA,YAAY,EAAExB,YAFhB;AAGE,QAAA,aAAa,EAAEJ,aAHjB;AAIE,QAAA,SAAS,EAAEJ,SAJb;AAKE,QAAA,QAAQ,EAAEY,QALZ;AAME,QAAA,cAAc,EAAEI,cANlB;AAOE,QAAA,uBAAuB,EAAEmE,uBAP3B;AAQE,QAAA,qBAAqB,EAAE/C,qBARzB;AASE,QAAA,YAAY,EAAEhB,YAThB;AAUE,QAAA,UAAU,EAAEE,UAVd;AAWE,QAAA,KAAK,EAAEI,KAXT;AAYE,QAAA,OAAO,EAAEE,OAZX;AAaE,QAAA,eAAe,EAAEwD,eAbnB;AAcE,QAAA,WAAW,EAAEM,WAdf;AAeE,QAAA,kBAAkB,EAAEC,kBAftB;AAgBE,QAAA,oBAAoB,EAAEvC,oBAhBxB;AAiBE,QAAA,UAAU,EAAEvB,UAjBd;AAkBE,QAAA,QAAQ,EAAEF;AAlBZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD;;GAvUQhC,I;;KAAAA,I;AAyUTA,IAAI,CAACmG,SAAL,GAAiB;AACfjG,EAAAA,OAAO,EAAEjC,SAAS,CAACmI,MAAV,CAAiBC;AADX,CAAjB;AAIA,eAAelI,UAAU,CAACO,MAAD,EAAS;AAAE4H,EAAAA,SAAS,EAAE;AAAb,CAAT,CAAV,eAAwC1I,IAAI,CAACoC,IAAD,CAA5C,CAAf","sourcesContent":["import React, { memo, useCallback, useState, useEffect, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport { withStyles } from \"@material-ui/core\";\r\nimport Routing from \"./Routing\";\r\nimport NavBar from \"./navigation/NavBar\";\r\nimport ConsecutiveSnackbarMessages from \"../../shared/components/ConsecutiveSnackbarMessages\";\r\nimport smoothScrollTop from \"../../shared/functions/smoothScrollTop\";\r\nimport persons from \"../dummy_data/persons\";\r\nimport LazyLoadAddBalanceDialog from \"./subscription/LazyLoadAddBalanceDialog\";\r\n\r\nconst styles = (theme) => ({\r\n  main: {\r\n    marginLeft: theme.spacing(9),\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      marginLeft: 0,\r\n    },\r\n  },\r\n});\r\n\r\nfunction shuffle(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n}\r\n\r\nfunction Main(props) {\r\n  const { classes } = props;\r\n  const [selectedTab, setSelectedTab] = useState(null);\r\n  const [CardChart, setCardChart] = useState(null);\r\n  const [hasFetchedCardChart, setHasFetchedCardChart] = useState(false);\r\n  const [EmojiTextArea, setEmojiTextArea] = useState(null);\r\n  const [hasFetchedEmojiTextArea, setHasFetchedEmojiTextArea] = useState(false);\r\n  const [ImageCropper, setImageCropper] = useState(null);\r\n  const [hasFetchedImageCropper, setHasFetchedImageCropper] = useState(false);\r\n  const [Dropzone, setDropzone] = useState(null);\r\n  const [hasFetchedDropzone, setHasFetchedDropzone] = useState(false);\r\n  const [DateTimePicker, setDateTimePicker] = useState(null);\r\n  const [hasFetchedDateTimePicker, setHasFetchedDateTimePicker] = useState(\r\n    false\r\n  );\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [statistics, setStatistics] = useState({ views: [], profit: [] });\r\n  const [posts, setPosts] = useState([]);\r\n  const [targets, setTargets] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [isAccountActivated, setIsAccountActivated] = useState(false);\r\n  const [isAddBalanceDialogOpen, setIsAddBalanceDialogOpen] = useState(false);\r\n  const [pushMessageToSnackbar, setPushMessageToSnackbar] = useState(null);\r\n\r\n  const fetchRandomTargets = useCallback(() => {\r\n    const targets = [];\r\n    for (let i = 0; i < 35; i += 1) {\r\n      const randomPerson = persons[Math.floor(Math.random() * persons.length)];\r\n      const target = {\r\n        id: i,\r\n        number1: Math.floor(Math.random() * 251),\r\n        number2: Math.floor(Math.random() * 251),\r\n        number3: Math.floor(Math.random() * 251),\r\n        number4: Math.floor(Math.random() * 251),\r\n        name: randomPerson.name,\r\n        profilePicUrl: randomPerson.src,\r\n        isActivated: Math.round(Math.random()) ? true : false,\r\n      };\r\n      targets.push(target);\r\n    }\r\n    setTargets(targets);\r\n  }, [setTargets]);\r\n\r\n  const openAddBalanceDialog = useCallback(() => {\r\n    setIsAddBalanceDialogOpen(true);\r\n  }, [setIsAddBalanceDialogOpen]);\r\n\r\n  const closeAddBalanceDialog = useCallback(() => {\r\n    setIsAddBalanceDialogOpen(false);\r\n  }, [setIsAddBalanceDialogOpen]);\r\n\r\n  const onPaymentSuccess = useCallback(() => {\r\n    pushMessageToSnackbar({\r\n      text: \"Your balance has been updated.\",\r\n    });\r\n    setIsAddBalanceDialogOpen(false);\r\n  }, [pushMessageToSnackbar, setIsAddBalanceDialogOpen]);\r\n\r\n  const fetchRandomStatistics = useCallback(() => {\r\n    const statistics = { profit: [], views: [] };\r\n    const iterations = 300;\r\n    const oneYearSeconds = 60 * 60 * 24 * 365;\r\n    let curProfit = Math.round(3000 + Math.random() * 1000);\r\n    let curViews = Math.round(3000 + Math.random() * 1000);\r\n    let curUnix = Math.round(new Date().getTime() / 1000) - oneYearSeconds;\r\n    for (let i = 0; i < iterations; i += 1) {\r\n      curUnix += Math.round(oneYearSeconds / iterations);\r\n      curProfit += Math.round((Math.random() * 2 - 1) * 10);\r\n      curViews += Math.round((Math.random() * 2 - 1) * 10);\r\n      statistics.profit.push({\r\n        value: curProfit,\r\n        timestamp: curUnix,\r\n      });\r\n      statistics.views.push({\r\n        value: curViews,\r\n        timestamp: curUnix,\r\n      });\r\n    }\r\n    setStatistics(statistics);\r\n  }, [setStatistics]);\r\n\r\n  const fetchRandomTransactions = useCallback(() => {\r\n    const transactions = [];\r\n    const iterations = 32;\r\n    const oneMonthSeconds = Math.round(60 * 60 * 24 * 30.5);\r\n    const transactionTemplates = [\r\n      {\r\n        description: \"Starter subscription\",\r\n        isSubscription: true,\r\n        balanceChange: -1499,\r\n      },\r\n      {\r\n        description: \"Premium subscription\",\r\n        isSubscription: true,\r\n        balanceChange: -2999,\r\n      },\r\n      {\r\n        description: \"Business subscription\",\r\n        isSubscription: true,\r\n        balanceChange: -4999,\r\n      },\r\n      {\r\n        description: \"Tycoon subscription\",\r\n        isSubscription: true,\r\n        balanceChange: -9999,\r\n      },\r\n      {\r\n        description: \"Added funds\",\r\n        isSubscription: false,\r\n        balanceChange: 2000,\r\n      },\r\n      {\r\n        description: \"Added funds\",\r\n        isSubscription: false,\r\n        balanceChange: 5000,\r\n      },\r\n    ];\r\n    let curUnix = Math.round(\r\n      new Date().getTime() / 1000 - iterations * oneMonthSeconds\r\n    );\r\n    for (let i = 0; i < iterations; i += 1) {\r\n      const randomTransactionTemplate =\r\n        transactionTemplates[\r\n          Math.floor(Math.random() * transactionTemplates.length)\r\n        ];\r\n      const transaction = {\r\n        id: i,\r\n        description: randomTransactionTemplate.description,\r\n        balanceChange: randomTransactionTemplate.balanceChange,\r\n        paidUntil: curUnix + oneMonthSeconds,\r\n        timestamp: curUnix,\r\n      };\r\n      curUnix += oneMonthSeconds;\r\n      transactions.push(transaction);\r\n    }\r\n    transactions.reverse();\r\n    setTransactions(transactions);\r\n  }, [setTransactions]);\r\n\r\n  const fetchRandomMessages = useCallback(() => {\r\n    shuffle(persons);\r\n    const messages = [];\r\n    const iterations = persons.length;\r\n    const oneDaySeconds = 60 * 60 * 24;\r\n    let curUnix = Math.round(\r\n      new Date().getTime() / 1000 - iterations * oneDaySeconds\r\n    );\r\n    for (let i = 0; i < iterations; i += 1) {\r\n      const person = persons[i];\r\n      const message = {\r\n        id: i,\r\n        src: person.src,\r\n        date: curUnix,\r\n        text: \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr sed.\",\r\n      };\r\n      curUnix += oneDaySeconds;\r\n      messages.push(message);\r\n    }\r\n    messages.reverse();\r\n    setMessages(messages);\r\n  }, [setMessages]);\r\n\r\n  const fetchRandomPosts = useCallback(() => {\r\n    shuffle(persons);\r\n    const posts = [];\r\n    const iterations = persons.length;\r\n    const oneDaySeconds = 60 * 60 * 24;\r\n    let curUnix = Math.round(\r\n      new Date().getTime() / 1000 - iterations * oneDaySeconds\r\n    );\r\n    for (let i = 0; i < iterations; i += 1) {\r\n      const person = persons[i];\r\n      const post = {\r\n        id: i,\r\n        src: person.src,\r\n        timestamp: curUnix,\r\n        name: person.name,\r\n      };\r\n      curUnix += oneDaySeconds;\r\n      posts.push(post);\r\n    }\r\n    posts.reverse();\r\n    setPosts(posts);\r\n  }, [setPosts]);\r\n\r\n  const toggleAccountActivation = useCallback(() => {\r\n    if (pushMessageToSnackbar) {\r\n      if (isAccountActivated) {\r\n        pushMessageToSnackbar({\r\n          text: \"Your account is now deactivated.\",\r\n        });\r\n      } else {\r\n        pushMessageToSnackbar({\r\n          text: \"Your account is now activated.\",\r\n        });\r\n      }\r\n    }\r\n    setIsAccountActivated(!isAccountActivated);\r\n  }, [pushMessageToSnackbar, isAccountActivated, setIsAccountActivated]);\r\n\r\n  const selectDashboard = useCallback(() => {\r\n    smoothScrollTop();\r\n    document.title = \"WaVer - Dashboard\";\r\n    setSelectedTab(\"Dashboard\");\r\n    if (!hasFetchedCardChart) {\r\n      setHasFetchedCardChart(true);\r\n      import(\"../../shared/components/CardChart\").then((Component) => {\r\n        setCardChart(Component.default);\r\n      });\r\n    }\r\n  }, [\r\n    setSelectedTab,\r\n    setCardChart,\r\n    hasFetchedCardChart,\r\n    setHasFetchedCardChart,\r\n  ]);\r\n\r\n  const selectPosts = useCallback(() => {\r\n    smoothScrollTop();\r\n    document.title = \"WaVer - Posts\";\r\n    setSelectedTab(\"Posts\");\r\n    if (!hasFetchedEmojiTextArea) {\r\n      setHasFetchedEmojiTextArea(true);\r\n      import(\"../../shared/components/EmojiTextArea\").then((Component) => {\r\n        setEmojiTextArea(Component.default);\r\n      });\r\n    }\r\n    if (!hasFetchedImageCropper) {\r\n      setHasFetchedImageCropper(true);\r\n      import(\"../../shared/components/ImageCropper\").then((Component) => {\r\n        setImageCropper(Component.default);\r\n      });\r\n    }\r\n    if (!hasFetchedDropzone) {\r\n      setHasFetchedDropzone(true);\r\n      import(\"../../shared/components/Dropzone\").then((Component) => {\r\n        setDropzone(Component.default);\r\n      });\r\n    }\r\n    if (!hasFetchedDateTimePicker) {\r\n      setHasFetchedDateTimePicker(true);\r\n      import(\"../../shared/components/DateTimePicker\").then((Component) => {\r\n        setDateTimePicker(Component.default);\r\n      });\r\n    }\r\n  }, [\r\n    setSelectedTab,\r\n    setEmojiTextArea,\r\n    setImageCropper,\r\n    setDropzone,\r\n    setDateTimePicker,\r\n    hasFetchedEmojiTextArea,\r\n    setHasFetchedEmojiTextArea,\r\n    hasFetchedImageCropper,\r\n    setHasFetchedImageCropper,\r\n    hasFetchedDropzone,\r\n    setHasFetchedDropzone,\r\n    hasFetchedDateTimePicker,\r\n    setHasFetchedDateTimePicker,\r\n  ]);\r\n\r\n  const selectSubscription = useCallback(() => {\r\n    smoothScrollTop();\r\n    document.title = \"WaVer - Subscription\";\r\n    setSelectedTab(\"Subscription\");\r\n  }, [setSelectedTab]);\r\n\r\n  const getPushMessageFromChild = useCallback(\r\n    (pushMessage) => {\r\n      setPushMessageToSnackbar(() => pushMessage);\r\n    },\r\n    [setPushMessageToSnackbar]\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchRandomTargets();\r\n    fetchRandomStatistics();\r\n    fetchRandomTransactions();\r\n    fetchRandomMessages();\r\n    fetchRandomPosts();\r\n  }, [\r\n    fetchRandomTargets,\r\n    fetchRandomStatistics,\r\n    fetchRandomTransactions,\r\n    fetchRandomMessages,\r\n    fetchRandomPosts,\r\n  ]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <LazyLoadAddBalanceDialog\r\n        open={isAddBalanceDialogOpen}\r\n        onClose={closeAddBalanceDialog}\r\n        onSuccess={onPaymentSuccess}\r\n      />\r\n      <NavBar\r\n        selectedTab={selectedTab}\r\n        messages={messages}\r\n        openAddBalanceDialog={openAddBalanceDialog}\r\n      />\r\n      <ConsecutiveSnackbarMessages\r\n        getPushMessageFromChild={getPushMessageFromChild}\r\n      />\r\n      <main className={classNames(classes.main)}>\r\n        <Routing\r\n          isAccountActivated={isAccountActivated}\r\n          ImageCropper={ImageCropper}\r\n          EmojiTextArea={EmojiTextArea}\r\n          CardChart={CardChart}\r\n          Dropzone={Dropzone}\r\n          DateTimePicker={DateTimePicker}\r\n          toggleAccountActivation={toggleAccountActivation}\r\n          pushMessageToSnackbar={pushMessageToSnackbar}\r\n          transactions={transactions}\r\n          statistics={statistics}\r\n          posts={posts}\r\n          targets={targets}\r\n          selectDashboard={selectDashboard}\r\n          selectPosts={selectPosts}\r\n          selectSubscription={selectSubscription}\r\n          openAddBalanceDialog={openAddBalanceDialog}\r\n          setTargets={setTargets}\r\n          setPosts={setPosts}\r\n        />\r\n      </main>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nMain.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(memo(Main));\r\n"]},"metadata":{},"sourceType":"module"}